name: build/electron
run-name: Building and releasing electron app ðŸš€
on: push

jobs:
  release:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    env:
      DEBUG: electron-builder
      GH_TOKEN: ${{ secrets.github_token }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v1

      - name: Set short hash (win)
        if: ${{ startsWith(matrix.os, 'win') }}
        run: echo "SHORT_SHA=$("${{ github.sha }}".SubString(0, 8))" >> $env:GITHUB_ENV
      
      - name: Set short hash (mac/linux)
        if: ${{ startsWith(matrix.os, 'macos') }}
        id: vars
        run: echo "sha_short=${{ github.sha }}" | cut -c 1-18 >> $GITHUB_OUTPUT

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 20

      - name: Run unit tests
        run: npm test

      - name: Build/release MacOS Electron app
        if: ${{ startsWith(matrix.os, 'macos') }}
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}
          args: --mac --universal
          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          max_attempts: 1
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build/release Windows Electron app
        if: ${{ startsWith(matrix.os, 'windows') }}
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.github_token }}
          max_attempts: 1
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}

      # uncomment to manually build apps in PRs/branches

      # - name: "npm install"
      #   run: npm install

      # - name: "npm build"
      #   run: npm run build

      # - name: "electron-builder"
      #   run: npx electron-builder --publish never

      # - name: "Upload mac artifact"
      #   if: ${{ matrix.os == 'macos-latest' }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: CTT_MacOS_arm64_${{ steps.vars.outputs.sha_short }}
      #     path: |
      #       dist/*.dmg
      #       dist/*.dmg.blockmap
      #       dist/*.yml

      # - name: "Upload mac artifact"
      #   if: ${{ matrix.os == 'macos-13' }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: CTT_MacOS_amd64_${{ steps.vars.outputs.sha_short }}
      #     path: |
      #       dist/*.dmg
      #       dist/*.dmg.blockmap
      #       dist/*.yml

      # - name: "Upload windows artifact"
      #   if: ${{ startsWith(matrix.os, 'win') }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: CTT_Windows_64_${{ env.SHORT_SHA }}
      #     path: dist
